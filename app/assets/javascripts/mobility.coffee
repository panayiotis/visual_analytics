window.MobilityVisualization = {}
window.MobilityVisualization.draw = (element) ->
  margin =
    top: 30
    right: 30
    bottom: 30
    left: 30
  
  width = $(element).width() - (margin.left) - (margin.right)
  
  height = $(element).height() - (margin.top) - (margin.bottom)
  
  formatNumber = d3.format(',.0f')

  format = (d) ->
    formatNumber(d) + ' TWh'

  color = d3.scale.category20()
  
  svg = d3.select('#mobility-sankey')
  .append('svg')
  .attr('width', width + margin.left + margin.right)
  .attr('height', height + margin.top + margin.bottom)
  .append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
  
  sankey = d3.sankey()
  .nodeWidth(15)
  .nodePadding(10)
  .size([
    width
    height
  ])
  
  path = sankey.link()
  
  escos = [
    "Armed forces occupations"
    "Clerical support workers"
    "Craft and related trades workers"
    "Elementary occupations"
    "Managers"
    "Plant and machine operators, and assemblers"
    "Professionals"
    "Service and sales workers"
    "Skilled agricultural, forestry and fishery workers"
    "Technicians and associate professionals"
  ]

  rcountries =[
    "Austria"
    "Belgium"
    "Bulgaria"
    "Croatia"
    "Cyprus"
    "Czech Republic"
    "Denmark"
    "Estonia"
    "Finland"
    "France"
    "Germany"
    "Greece"
    "Hungary"
    "Italy"
    "Latvia"
    "Lithuania"
    "Luxembourg"
    "Malta"
    "Netherlands"
    "Poland"
    "Portugal"
    "Romania"
    "Slovakia"
    "Slovenia"
    "Spain"
    "Sweden"
    "United Kingdom"
  ]

  lcountries = [
    "DEUTSCHLAND"
    "IRELAND"
    "ITALIA"
    "UNITED KINGDOM"
    "ČESKÁ REPUBLIKA"
  ]

  indexes = escos.concat(rcountries).concat(lcountries)

  nodes = indexes.map (i) -> { name: i }
  links = [source: 0 , target: nodes.length-1, value: 1]
  d3.csv '/spark/4/data.csv', (right) ->
    d3.csv '/spark/5/data.csv', (left) ->
      links = links.concat right.map (i) ->
        { source: indexes.indexOf(i.esco), target: indexes.indexOf(i.country), value: Math.floor(+i.count)/1.2 }
      .concat left.map (i) ->
        { source: indexes.indexOf(i.country), target: indexes.indexOf(i.esco), value: Math.floor(+i.count) }
      #console.log "nodes:"
      #console.log nodes

      #console.log "links:"
      #console.log links
  
      dragmove = (d) ->
        d3.select(this)
        .attr 'transform', 'translate(' + d.x + ',' + (d.y = Math.max(0, Math.min(height - (d.dy), d3.event.y))) + ')'
        
        sankey.relayout()
        
        link.attr 'd', path
        return

      sankey
      .nodes(nodes)
      .links(links)
      .layout 32
      
      link = svg.append('g').selectAll('.link')
      .data(links)
      .enter()
      .append('path')
      .attr('class', 'link')
      .attr('d', path)
      .style('stroke-width', (d) ->
        Math.max 1, d.dy
      ).sort((a, b) ->
        b.dy - (a.dy)
      )
      
      link.append('title')
      .text (d) ->
        d.source.name + ' → ' + d.target.name + '\n' + d.count
      
      node = svg.append('g').selectAll('.node')
      .data(nodes)
      .enter().append('g')
      .attr('class', 'node')
      .attr('transform', (d) ->
        'translate(' + d.x + ',' + d.y + ')'
      ).call(d3.behavior.drag().origin((d) ->
        d
      ).on('dragstart', ->
        @parentNode.appendChild this
        return
      ).on('drag', dragmove))
      
      node.append('rect')
      .attr('height', (d) ->
        d.dy
      ).attr('width', sankey.nodeWidth())
      .style('fill', (d) ->
        d.color = color(d.name.replace(RegExp(' .*'), ''))
      ).style('stroke', (d) ->
        d3.rgb(d.color).darker 2
      ).append('title').text (d) ->
        d.name + '\n' + d.value
      
      node.append('text')
      .attr('x', -6)
      .attr('y', (d) ->
        d.dy / 2
      ).attr('dy', '.35em')
      .attr('text-anchor', 'end')
      .attr('transform', null)
      .text((d) ->
        d.name
      ).filter((d) ->
        d.x < width / 2
      ).attr('x', 6 + sankey.nodeWidth())
      .attr 'text-anchor', 'start'
      return

  # ---
  # generated by js2coffee 2.2.0
